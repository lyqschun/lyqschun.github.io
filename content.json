{"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/hello-world.html"},{"title":"V2ray安装与使用","text":"V2ray安装与使用Windows系统首先我们先下载V2ray客户端下载地址：V2ray下载地址官网：V2ray官网下载地址 下载完成后，解压打开文件，启动v2ray,然后会没有gui界面显示， 看windows右下角有一个红色的V2ray图标，双加打开。进入解压后的V2rayN-core目录，双击”v2rayN”文件，程序启动后会最小化到右下角的托盘(桌面右下角，显示时间输入法那块)。双击蓝色的V字小图标，打开V2rayN的主界面 进入V2ray主界面，点击订阅设置 V2ray主界面 填入订阅链接:https://maoxiongnet.com/link/aIwE2TysixNYKN9E?sub=3&amp;extend=1不要直接点开，复制到v2中点击更新订阅 他就会刷新，等一会儿，主界面就会有节点显示出来 点击路由设置 设置如下： 填入Domain 1234567891011121314151617181920212223geosite:cn,geosite:apple,geosite:category-ads-all,msn.com,bitwarden.com,bitwarden.net,mousegesturesapi.com,adservice.google.com,store.steampowered.com,blog.csdn.net,baiyunju.cc,daokesouti.com,viewer.mosoteach.cn,www.mosoteach.cn,www.icourse163.org,shimo.im,moonswap.fi,gitee.com,axutongxue.com,www.whuobi.com,gank.io,github.com,www.lanzous.com 填入ip 12geoip:private,geoip:cn 选择要使用的节点，右键，选择设为活动服务器尝试访问一下google：Google能进去就说明成功啦 Android系统Linux系统","link":"/tools/V2ray%E7%9A%84%E4%BD%BF%E7%94%A8.html"},{"title":"nihao","text":"","link":"/nihao/nihao.html"},{"title":"docker安装与使用","text":"简介Docker简介Docker 使用客户端-服务器 (C/S) 架构模式。Docker 客户端会与 Docker 守护进程进行通信。Docker 守护进程会处理复杂繁重的任务，例如建立、运行、发布你的 Docker 容器。Docker 客户端和守护进程可以运行在同一个系统上，当然你也可以使用 Docker 客户端去连接一个远程的 Docker 守护进程。Docker 客户端和守护进程之间通过 socket 或者 RESTful API 进行通信。 Docker: 开源的容器虚拟化平台 Docker Hub: 用于分享、管理 Docker 容器的 Docker SaaS 平台 – Docker Hub Docker 守护进程如上图所示，Docker 守护进程运行在一台主机上。用户并不直接和守护进程进行交互，而是通过 Docker 客户端间接和其通信。 Docker 客户端Docker 客户端，实际上是 docker 的二进制程序，是主要的用户与 Docker 交互方式。它接收用户指令并且与背后的 Docker 守护进程通信，如此来回往复。 Docker 内部要理解 Docker 内部构建，需要理解以下三种部件： Docker 镜像 - Docker images Docker 仓库 - Docker registeries Docker 容器 - Docker containers Docker 镜像Docker 镜像是 Docker 容器运行时的只读模板，每一个镜像由一系列的层 (layers) 组成。Docker 使用 UnionFS 来将这些层联合到单独的镜像中。UnionFS 允许独立文件系统中的文件和文件夹(称之为分支)被透明覆盖，形成一个单独连贯的文件系统。正因为有了这些层的存在，Docker 是如此的轻量。当你改变了一个 Docker 镜像，比如升级到某个程序到新的版本，一个新的层会被创建。因此，不用替换整个原先的镜像或者重新建立(在使用虚拟机的时候你可能会这么做)，只是一个新的层被添加或升级了。现在你不用重新发布整个镜像，只需要升级，层使得分发 Docker 镜像变得简单和快速。 Docker 仓库Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。同样的，Docker 仓库也有公有和私有的概念。公有的 Docker 仓库名字是 Docker Hub。Docker Hub 提供了庞大的镜像集合供使用。这些镜像可以是自己创建，或者在别人的镜像基础上创建。Docker 仓库是 Docker 的分发部分。 Docker 容器Docker 容器和文件夹很类似，一个Docker容器包含了所有的某个应用运行所需要的环境。每一个 Docker 容器都是从 Docker 镜像创建的。Docker 容器可以运行、开始、停止、移动和删除。每一个 Docker 容器都是独立和安全的应用平台，Docker 容器是 Docker 的运行部分。 Docker 从 0.9 版本开始使用 libcontainer 替代 lxc，libcontainer 和 Linux 系统的交互图如下 安装mac安装mac 的安装，一行代码，其余系统的安装方式，请自行搜索 12$ brew cask install docker$ docker was successfully installed! 镜像加速鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是网易的镜像地址：http://hub-mirror.c.163.com。 在任务栏点击 Docker for mac 应用图标 -&gt; Perferences… -&gt; Daemon -&gt; Registry mirrors。在列表中填写加速器地址即可。修改完成之后，点击 Apply &amp; Restart 按钮，Docker 就会重启并应用配置的镜像地址了。 通过 docker info 来查看是否配置成功。 12345678910111213141516171819$ docker infoContainers: 0 Running: 0 Paused: 0 Stopped: 0Images: 0Server Version: 18.09.2Storage Driver: overlay2 Backing Filesystem: extfs Supports d_type: true Native Overlay Diff: trueLogging Driver: json-fileCgroup Driver: cgroupfsPlugins: Volume: local Network: bridge host macvlan null overlay Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslogSwarm: inactive... 查看相关的使用命令 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374$ dockerUsage: docker [OPTIONS] COMMANDA self-sufficient runtime for containersOptions: --config string Location of client config files (default &quot;/Users/liyuechao/.docker&quot;) -D, --debug Enable debug mode -H, --host list Daemon socket(s) to connect to -l, --log-level string Set the logging level (&quot;debug&quot;|&quot;info&quot;|&quot;warn&quot;|&quot;error&quot;|&quot;fatal&quot;) (default &quot;info&quot;) --tls Use TLS; implied by --tlsverify --tlscacert string Trust certs signed only by this CA (default &quot;/Users/liyuechao/.docker/ca.pem&quot;) --tlscert string Path to TLS certificate file (default &quot;/Users/liyuechao/.docker/cert.pem&quot;) --tlskey string Path to TLS key file (default &quot;/Users/liyuechao/.docker/key.pem&quot;) --tlsverify Use TLS and verify the remote -v, --version Print version information and quitManagement Commands: builder Manage builds config Manage Docker configs container Manage containers image Manage images network Manage networks node Manage Swarm nodes plugin Manage plugins secret Manage Docker secrets service Manage services stack Manage Docker stacks swarm Manage Swarm system Manage Docker trust Manage trust on Docker images volume Manage volumesCommands: attach Attach local standard input, output, and error streams to a running container build Build an image from a Dockerfile commit Create a new image from a container's changes cp Copy files/folders between a container and the local filesystem create Create a new container diff Inspect changes to files or directories on a container's filesystem events Get real time events from the server exec Run a command in a running container export Export a container's filesystem as a tar archive history Show the history of an image images List images import Import the contents from a tarball to create a filesystem image info Display system-wide information inspect Return low-level information on Docker objects kill Kill one or more running containers load Load an image from a tar archive or STDIN login Log in to a Docker registry logout Log out from a Docker registry logs Fetch the logs of a container pause Pause all processes within one or more containers port List port mappings or a specific mapping for the container ps List containers pull Pull an image or a repository from a registry push Push an image or a repository to a registry rename Rename a container restart Restart one or more containers rm Remove one or more containers rmi Remove one or more images run Run a command in a new container save Save one or more images to a tar archive (streamed to STDOUT by default) search Search the Docker Hub for images start Start one or more stopped containers stats Display a live stream of container(s) resource usage statistics stop Stop one or more running containers tag Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE top Display the running processes of a container unpause Unpause all processes within one or more containers update Update configuration of one or more containers version Show the Docker version information wait Block until one or more containers stop, then print their exit codes 安装mysql实例docker search mysql 查看mysql相关的安装文件 docker pull mysql:5.7.21（这边是5.7.21指的是TAG版本，不指定的话默认会下载最新的LATEST版本） docker images查看所有镜像 简单新建容器docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql 接下来就可以使用NAVICAT连接127.0.0.1的ROOT账户了，密码是上面配置的123456 常用命令12345678910111213141516171819202122232425262728docker images : 列出本地镜像docker pull : 从镜像仓库中拉取或者更新指定镜像docker run ：创建一个新的容器并运行一个命令-d: 后台运行容器，并返回容器ID-p: 端口映射，格式为：主机(宿主)端口:容器端口--name=&quot;nginx-lb&quot;: 为容器指定一个名称-v：目录映射，格式为：主机目录:容器目录docker rm ：删除一个或多个容器docker start :启动一个或多少已经被停止的容器docker stop :停止一个运行中的容器docker kill :杀掉一个运行中的容器（强制）docker restart :重启容器docker port :列出指定的容器的端口映射，或者查找将PRIVATE_PORT NAT到面向公众的端口。docker logs : 获取容器的日志-f : 跟踪日志输出--since :显示某个开始时间的所有日志-t : 显示时间戳--tail :仅列出最新N条容器日志docker exec -i -t mynginx /bin/bash：在容器mynginx中开启一个交互模式的终端，即通过SSH协议进入容器docker ps : 列出容器-a :显示所有的容器，包括未运行的。docker cp：拷贝主机docker cp /www/runoob 96f7f14e99ab:/www/ Docker 端口映射12# Find IP address of container with ID &lt;container_id&gt; 通过容器 id 获取 ip$ sudo docker inspect &lt;container_id&gt; | grep IPAddress | cut -d ’&quot;’ -f 4 无论如何，这些 ip 是基于本地系统的并且容器的端口非本地主机是访问不到的。此外，除了端口只能本地访问外，对于容器的另外一个问题是这些 ip 在容器每次启动的时候都会改变。 Docker 解决了容器的这两个问题，并且给容器内部服务的访问提供了一个简单而可靠的方法。Docker 通过端口绑定主机系统的接口，允许非本地客户端访问容器内部运行的服务。为了简便的使得容器间通信，Docker 提供了这种连接机制。 自动映射端口 -P 使用时需要指定 --expose 选项，指定需要对外提供服务的端口 1$ sudo docker run -t -P --expose 22 --name server ubuntu:14.04 使用 docker run -P 自动绑定所有对外提供服务的容器端口，映射的端口将会从没有使用的端口池中 (49000..49900) 自动选择，你可以通过 docker ps 、docker inspect &lt;container_id&gt; 或者 docker port &lt;container_id&gt; &lt;port&gt; 确定具体的绑定信息。 绑定端口到指定接口 基本语法 1$ sudo docker run -p [([&lt;host_interface&gt;:[host_port]])|(&lt;host_port&gt;):]&lt;container_port&gt;[/udp] &lt;image&gt; &lt;cmd&gt; 默认不指定绑定 ip 则监听所有网络接口。 绑定 TCP 端口 12345678# Bind TCP port 8080 of the container to TCP port 80 on 127.0.0.1 of the host machine.$ sudo docker run -p 127.0.0.1:80:8080 &lt;image&gt; &lt;cmd&gt;# Bind TCP port 8080 of the container to a dynamically allocated TCP port on 127.0.0.1 of the host machine.$ sudo docker run -p 127.0.0.1::8080 &lt;image&gt; &lt;cmd&gt;# Bind TCP port 8080 of the container to TCP port 80 on all available interfaces of the host machine.$ sudo docker run -p 80:8080 &lt;image&gt; &lt;cmd&gt;# Bind TCP port 8080 of the container to a dynamically allocated TCP port on all available interfaces$ sudo docker run -p 8080 &lt;image&gt; &lt;cmd&gt; 绑定 UDP 端口 12# Bind UDP port 5353 of the container to UDP port 53 on 127.0.0.1 of the host machine.$ sudo docker run -p 127.0.0.1:53:5353/udp &lt;image&gt; &lt;cmd&gt; Docker 网络配置 Dokcer 通过使用 Linux 桥接提供容器之间的通信，docker0 桥接接口的目的就是方便 Docker 管理。当 Docker daemon 启动时需要做以下操作： creates the docker0 bridge if not present # 如果 docker0 不存在则创建 searches for an IP address range which doesn’t overlap with an existing route # 搜索一个与当前路由不冲突的 ip 段 picks an IP in the selected range # 在确定的范围中选择 ip assigns this IP to the docker0 bridge # 绑定 ip 到 docker0 Docker 四种网络模式docker run 创建 Docker 容器时，可以用 –net 选项指定容器的网络模式，Docker 有以下 4 种网络模式： host 模式，使用 –net=host 指定。 container 模式，使用 –net=container:NAME_or_ID 指定。 none 模式，使用 –net=none 指定。 bridge 模式，使用 –net=bridge 指定，默认设置。 桥接网络 不同容器之间的通信可以借助于 pipework 这个工具给 docker 容器新建虚拟网卡并绑定 IP 桥接到 br0 pipework 可以创建容器的 vlan 网络，这里不作过多的介绍了，官方文档已经写的很清楚了，可以查看以下两篇文章： Pipework 官方文档 Docker 网络详解及 pipework 源码解读与实践 开发容器镜像为了构建容器镜像，我们必须创建一个dockerfile，它将包含所有必要的信息。请参考这个文档（https://nodejs.org/en/docs/guides/nodejs-docker-webapp/）来开发dockerfile。 构建Docker容器1$docker build -t containername 这个命令将把Dockerfile放到当前的目录中。如果你的dockerfile名称不一样而且在不同的位置，可以使用-f 标签来指定dockerfile的名称。“docker build”命令将在“-t”标签指定的名称中构建容器镜像。 镜像命名惯例当在本地运行的时候，可以给Docker容器随便起什么名。可以简单的像上面提到的“myApp”。但是如果你想发布镜像到Docker Hub中，那么就需要遵循一个指定的命名惯例。这个惯例可以帮助Docker工具来发布容器镜像到正确的命名空间和资源库中。 格式：NameSpace/Repository:Version 1$docker build -t saravasu/techietweak:001 还能用“docker tag”命令从外部镜像创建镜像 在Docker中列出所有镜像1$docker images 运行容器启动Docker容器使用“docker run”命令来启动Docker容器。 1$docker run -d -p 8080:8080 saravasu/techietweak:001 “-d”选项在分离模式中运行容器，因此容器继续运行，甚至终端被关闭。 “-p”命令用来映射端口。在这个例子中，“-p 8080:8080”第一个端口号是Docker主机用的端口。第二个端口号是被Docker容器使用。根据这个命令，所有的流量到达Docker主机端口，将转到Docker容器端口。 检查当前运行的容器1$docker ps 一个Docker容器在名为“trusting_snyder.”中运行。 若要列出所有的容器，使用“- a”切换。 1$docker ps -a 展示运行容器的控制台日志1$docker logs &lt;containerName&gt; 容器名称可以通过 “docker ps” 命令发现。 登陆到容器1$docker exec -it containerId /bin/bash 上面的命令将提示你使用容器的“bash”。 停止运行的容器1$docker stop &lt;containername&gt; 从Docker移除容器镜像1$docker rm imageId 使用“docker images” 或“docker images -a.”命令发现容器的imageId。 1$docker rmi -f &lt;List Of Image Ids&gt; 上面的命令将强有力的删除指定的镜像。 发布容器镜像Docker容器镜像可以发布到本地dockyard或公共Docker Hub。这两个过程和命令都是一样的。要在Docker Hub中发布Docker映像，首先在http://hub.docker.com上创建名称空间和资源库。 我用了我的命名空间“saravasu”和资源库“techietweak”来进行这个练习。 登陆Docker Hub$docker login 如果你想登陆到本地的资源库，需要提供URL。如果URL不是特定的，那么这个命令将登陆到Docker Hub中。 $docker login http://localhost:8080 标记容器镜像要将Docker容器映像推到Docker Hub，它必须以特定的格式标记：&lt; Namespace &gt; / &lt; Repository &gt;:&lt; Version &gt;。如果未指定该版本，将被视为“默认”。在下面的命令中，我标记了镜像： 1$docker tag myapp:latest saravasu/techietweak:001 把Docker镜像推到Docker Hub中1$docker push saravasu/techietweak:001 在Docker Hub中检查容器镜像现在登陆你的Docker Hub账户，然后在各自的资源库中检查镜像。 部署容器拉出Docker容器镜像在目标环境中，从主机登陆到Docker Hub中，并且从Docker Hub中拉出容器镜像。如果你想从自己的dockyard拉出，使用“$docker login ”命令指定自己dockyard的主机名。 $docker login 上面的命令将登陆到https://hub.docker.com，因为主机名没有指定。 1$docker pull saravasu/techietweak:001 检查镜像docker pull命令从Docker Hub下载容器镜像。我们可以使用“docker images”命令来验证相同的结果。 $docker images 运行容器现在，我们可以用同样的方式运行Docker容器，就像在开发环境中运行一样，用我们以前做过的方式来测试它。 1$docker run -d -p 8080:8080 saravasu/techietweak:001 docker run命令启动容器。为了验证，可以使用“docker ps”命令。Docker创建了一个新的容器，以“naughty_lewin.的名字运行。 正如我们在上面看到的，Docker引擎为运行的容器提供了一个随机的名称，但这可能在自动化中是个问题，因此指定一个我们要参考的名称总是好的。这可以通过使用“- name”参数实现。 1$docker run -d -p 8080:8080 --name &quot;myNodeJsWebContainer&quot; saravasu/techietweak:001 参考链接： https://www.jianshu.com/p/83d360604619 https://www.jianshu.com/p/1c5fef69897f https://www.jianshu.com/p/a611fbe0d12b","link":"/tools/docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.html"}],"tags":[{"name":"V2ray","slug":"V2ray","link":"/tags/V2ray/"},{"name":"docker","slug":"docker","link":"/tags/docker/"}],"categories":[{"name":"科学上网","slug":"科学上网","link":"/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"},{"name":"基础工具类","slug":"基础工具类","link":"/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7%E7%B1%BB/"},{"name":"工具","slug":"科学上网/工具","link":"/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/%E5%B7%A5%E5%85%B7/"},{"name":"docker","slug":"基础工具类/docker","link":"/categories/%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7%E7%B1%BB/docker/"}],"pages":[{"title":"","text":"🎈🎈微笑墙🎈🎈 彭小苒 唐艺昕 李一桐 gakki 图片搜集于互联网，侵权请留言，马上处理😊。","link":"/album/index.html"},{"title":"","text":"申请友链须知 原则上只和技术类博客交换，但不包括含有和色情、暴力、政治敏感的网站。 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。 申请请提供：站点名称、站点链接、站点描述、logo或头像（不要设置防盗链）。 排名不分先后，刷新后重排，更新信息后请留言告知。 会定期清理很久很久不更新的、不符合要求的友链，不再另行通知。 本站不存储友链图片，如果友链图片换了无法更新。图片裂了的会替换成默认图，需要更换的请留言告知。 本站友链信息如下，申请友链前请先添加本站信息： 网站图标：https://removeif.github.io/images/avatar.jpg 网站名称：辣椒の酱 网站地址：https://removeif.github.io 网站简介：后端开发，技术分享 加载中，稍等几秒...","link":"/friend/index.html"},{"title":"","text":"个人简介 分享很喜欢的老罗的一段话： “每一个生命来到世间都注定改变世界，别无选择。要么变得好一点，要么变得坏一点。你如果走进社会为了生存为了什么不要脸的理由，变成了一个恶心的成年人社会中的一员，那你就把这个世界变得恶心了一点点。如果你一生刚正不阿，如果你一生耿直，没有做任何恶心的事情，没做对别人有害的事情，一辈子拼了老命勉强把自己身边的几个人照顾好了，没有成名没有发财，没有成就伟大的事业，然后耿着脖子一生正直，到了七八十岁耿着脖子去世了。你这一生是不是没有改变世界？你还是改变世界了，你把这个世界变得美好了一点点。因为世界上又多了一个好人。“ 善恶终有报,天道好轮回。不信抬头看,苍天饶过谁。无论何时何地，我们都要保持一颗积极乐观、善良感恩的心。但行好事莫问前程，永远年轻，永远热内盈眶，永远保持正能量。💪💪💪💪💪💪冲鸭！！！！ -&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;个人信息：计算机科学与技术专业从事JAVA后端开发码畜一枚坚信代码改变世界 博客信息 网站采用的Icarus主题 追求尽可能的简洁，清晰，易用。 在Icarus主题之上进行了部分修改。 更新日志：–2020.09.20：icarus4.0适配–2020.01.18：icarus3.0适配–2019.11.17：增加深色主题开关–2019.10.30：去图，精简卡片–2019.10.22：改版部分显示，优化速度–2019.10.16：文章列表加上评论数显示–2019.10.13：改版评论–2019.09.25：图片、资源接入CDN免费jsDelivr、文章加入置顶–2019.09.19：开源博客代码–2019.09.19：修改布局，拉伸布局，更宽的展示–2019.09.18：修改友链ui为一行三个，并适配移动端，暗黑模式文章增加评论链接，增加留言链接–2019.09.14：增加精简next主题–2019.09.14：利用中秋节放假，重做了首页的热门推荐、加个widget最新评论框、归档页加入文章贡献概览面板 本站推荐索引 博客主题相关 github Issue 作为博客微型数据库的应用 github page网站cdn优化加速 博客源码分享 博客换肤的一种实现方式思路 博客中gitalk最新评论的获取 博客图片上传picgo工具github图传使用 安装、部分配置icarus主题中文版 技术知识点 Java并发知识点 法律法规 法律法规数据库 中华人民共和国国旗法 中华人民共和国宪法 中华人民共和国消费者权益保护法 中华人民共和国刑事诉讼法 中华人民共和国婚姻法 中华人名共和国网络安全法 中华人民共和国劳动法 其他 网易云音乐歌单分享 计划2020计划 2019.12.31 2020-GOALS 跑两三场马拉松 2019计划 2018.12.31/21:59:00-&gt;更新于2019.12.31 2019-GOALS 购买的专业书籍至少看完一遍（并发、重构、设计模式…）-&gt; 95%额外： 追了很多剧总结： 有优点有缺点，没坚持下来的还是太多，追了太多剧。以后多学习，多思考！ 时间轴记录","link":"/about/index.html"},{"title":"","text":"来而不往非礼也畅所欲言，有留必应","link":"/message/index.html"},{"title":"音乐歌单收藏","text":"温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/index.html"},{"title":"","text":"&nbsp;&nbsp;听听音乐 音乐播放器由mePlayer提供，布局参照网友博客所作，感谢作者的辛勤付出。更多音乐分享请查看歌单。 &nbsp;&nbsp;看看视频 ->点击以下条目开始播放视频,向下滑动查看更多","link":"/media/index.html"},{"title":"","text":"碎碎念 tips：github登录后按时间正序查看、可点赞加❤️、本插件地址..「+99次查看」 碎碎念加载中，请稍等... $.getScript(\"/js/gitalk_self.min.js\", function () { var gitalk = new Gitalk({ clientID: '973937d9fd966587fe5d', clientSecret: '0b9c15f9f80fc157ade7259c8870513c6a08c4b9', id: 'selftalk', repo: 'comment', owner: 'ssrskl', admin: \"ssrskl\", createIssueManually: true, distractionFreeMode: false }); gitalk.render('comment-container1'); });","link":"/self-talking/index.html"}]}